{"ast":null,"code":"var _jsxFileName = \"/workspaces/trail-quest-adventure-app/src/App.tsx\",\n  _s = $RefreshSig$();\n// App.tsx\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useSpeech } from './hooks/useSpeech';\nimport { useItinerary } from './hooks/useItinerary';\nimport { useAISuggestions } from './hooks/useAISuggestions';\nimport { useLocalStorage } from './hooks/useLocalStorage';\nimport { samplePOIs, mockWeather } from './data/sampleData';\nimport NavigationTabs from './components/NavigationTabs';\nimport PlanningPanel from './components/planning/PlanningPanel';\nimport POIList from './components/planning/POIList';\nimport MapPanel from './components/map/MapPanel';\nimport ItineraryPanel from './components/itinerary/ItineraryPanel';\nimport SettingsPanel from './components/settings/SettingsPanel';\nimport AISuggestionsPanel from './components/ai/AISuggestionsPanel';\nimport ErrorBoundary from './components/common/ErrorBoundary';\nimport LoadingSpinner from './components/common/LoadingSpinner';\n\n// Constants\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst REGIONS = ['Blue Ridge Mountains, VA', 'Appalachian Trail, NH', 'Historic Boston, MA', 'Colonial Williamsburg, VA', 'Great Smoky Mountains, TN'];\nconst DEFAULT_USER_PREFERENCES = {\n  interests: [],\n  mobilityLevel: 'moderate',\n  timePreference: 'flexible'\n};\nconst AdventureApp = () => {\n  _s();\n  // Core state with localStorage persistence\n  const [selectedRegion, setSelectedRegion] = useLocalStorage('selectedRegion', '');\n  const [startingPoint, setStartingPoint] = useLocalStorage('startingPoint', '');\n  const [currentView, setCurrentView] = useLocalStorage('currentView', 'planning');\n  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);\n\n  // Settings state with localStorage persistence\n  const [privacyMode, setPrivacyMode] = useLocalStorage('privacyMode', false);\n  const [offlineMode, setOfflineMode] = useLocalStorage('offlineMode', false);\n  const [voiceEnabled, setVoiceEnabled] = useLocalStorage('voiceEnabled', false);\n  const [userPreferences, setUserPreferences] = useLocalStorage('userPreferences', DEFAULT_USER_PREFERENCES);\n\n  // Weather state (not persisted as it's time-sensitive)\n  const [weather, setWeather] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Custom hooks\n  const speak = useSpeech(voiceEnabled);\n\n  // Memoized available POIs to prevent unnecessary re-renders\n  const availablePOIs = useMemo(() => selectedRegion ? samplePOIs[selectedRegion] || [] : [], [selectedRegion]);\n  const aiSuggestions = useAISuggestions(selectedRegion, availablePOIs, userPreferences);\n  const {\n    itinerary,\n    addPOI,\n    removePOI,\n    optimizeItinerary,\n    calculateTotalTime,\n    calculateTotalCost,\n    clearItinerary\n  } = useItinerary();\n\n  // Memoized handlers to prevent child re-renders\n  const handleRegionChange = useCallback(region => {\n    setSelectedRegion(region);\n    // Clear itinerary when region changes to avoid conflicts\n    if (region !== selectedRegion) {\n      clearItinerary();\n    }\n  }, [selectedRegion, setSelectedRegion, clearItinerary]);\n  const handleOptimizeItinerary = useCallback(() => {\n    try {\n      optimizeItinerary();\n      speak('Itinerary optimized for best visiting times and travel efficiency.');\n    } catch (err) {\n      setError('Failed to optimize itinerary. Please try again.');\n      console.error('Optimization error:', err);\n    }\n  }, [optimizeItinerary, speak]);\n  const downloadOfflineContent = useCallback(async () => {\n    try {\n      setIsLoading(true);\n      // Simulate download delay\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      setOfflineMode(true);\n      speak('Offline content downloaded. Maps and site information available without internet.');\n    } catch (err) {\n      setError('Failed to download offline content. Please check your connection.');\n      console.error('Offline download error:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [setOfflineMode, speak]);\n  const handleUserPreferencesUpdate = useCallback(updates => {\n    setUserPreferences(prev => ({\n      ...prev,\n      ...updates\n    }));\n  }, [setUserPreferences]);\n\n  // Effects\n  useEffect(() => {\n    const loadWeatherData = async () => {\n      try {\n        setIsLoading(true);\n        // Simulate API call\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        setWeather(mockWeather);\n      } catch (err) {\n        setError('Failed to load weather data');\n        console.error('Weather loading error:', err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    loadWeatherData();\n  }, [selectedRegion]); // Reload weather when region changes\n\n  // Clear error after 5 seconds\n  useEffect(() => {\n    if (error) {\n      const timer = setTimeout(() => setError(null), 5000);\n      return () => clearTimeout(timer);\n    }\n  }, [error]);\n\n  // Accessibility: Announce view changes\n  useEffect(() => {\n    if (voiceEnabled) {\n      const viewNames = {\n        planning: 'Trip Planning',\n        itinerary: 'My Itinerary',\n        settings: 'Settings and AI Suggestions'\n      };\n      speak(`Switched to ${viewNames[currentView]} view`);\n    }\n  }, [currentView, voiceEnabled, speak]);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-h-screen flex items-center justify-center\",\n      children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(ErrorBoundary, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-6xl mx-auto p-6 bg-gradient-to-br from-green-50 to-blue-50 min-h-screen\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"text-center mb-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-4xl font-bold text-green-800 mb-2\",\n          children: \"\\uD83C\\uDFD4\\uFE0F TrailQuest\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-600\",\n          children: \"Plan your perfect outdoor historical adventure\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4 p-4 bg-red-100 border border-red-300 rounded-lg text-red-700\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 13\n        }, this), offlineMode && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-2 inline-flex items-center px-3 py-1 rounded-full text-sm bg-green-100 text-green-800\",\n          children: \"\\u2713 Offline Ready\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NavigationTabs, {\n        currentView: currentView,\n        setCurrentView: setCurrentView,\n        hasItineraryItems: itinerary.length > 0\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), currentView === 'planning' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 lg:grid-cols-2 gap-6\",\n        children: [/*#__PURE__*/_jsxDEV(PlanningPanel, {\n          selectedRegion: selectedRegion,\n          setSelectedRegion: handleRegionChange,\n          selectedDate: selectedDate,\n          setSelectedDate: setSelectedDate,\n          startingPoint: startingPoint,\n          setStartingPoint: setStartingPoint,\n          weather: weather,\n          regions: REGIONS,\n          privacyMode: privacyMode,\n          children: /*#__PURE__*/_jsxDEV(POIList, {\n            pois: availablePOIs,\n            addToItinerary: addPOI,\n            userPreferences: userPreferences,\n            speak: speak\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(MapPanel, {\n          itinerary: itinerary,\n          availablePOIs: availablePOIs,\n          startingPoint: startingPoint,\n          offlineMode: offlineMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }, this), currentView === 'itinerary' && /*#__PURE__*/_jsxDEV(ItineraryPanel, {\n        itinerary: itinerary,\n        removePOI: removePOI,\n        optimizeItinerary: handleOptimizeItinerary,\n        calculateTotalTime: calculateTotalTime,\n        calculateTotalCost: calculateTotalCost,\n        speak: speak,\n        selectedDate: selectedDate,\n        startingPoint: startingPoint,\n        clearItinerary: clearItinerary\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 11\n      }, this), currentView === 'settings' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 lg:grid-cols-2 gap-6\",\n        children: [/*#__PURE__*/_jsxDEV(SettingsPanel, {\n          privacyMode: privacyMode,\n          setPrivacyMode: setPrivacyMode,\n          voiceEnabled: voiceEnabled,\n          setVoiceEnabled: setVoiceEnabled,\n          userPreferences: userPreferences,\n          setUserPreferences: handleUserPreferencesUpdate,\n          offlineMode: offlineMode,\n          downloadOfflineContent: downloadOfflineContent,\n          isLoading: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(AISuggestionsPanel, {\n          userPreferences: userPreferences,\n          setUserPreferences: handleUserPreferencesUpdate,\n          aiSuggestions: aiSuggestions,\n          selectedRegion: selectedRegion,\n          applyAISuggestion: suggestion => {\n            // Logic to apply AI suggestion to itinerary\n            speak(`Applied AI suggestion: ${suggestion.title}`);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n};\n_s(AdventureApp, \"I7vpYVOLHudnwL13DRtWcqCQU1Q=\", false, function () {\n  return [useLocalStorage, useLocalStorage, useLocalStorage, useLocalStorage, useLocalStorage, useLocalStorage, useLocalStorage, useSpeech, useAISuggestions, useItinerary];\n});\n_c = AdventureApp;\nexport default AdventureApp;\nvar _c;\n$RefreshReg$(_c, \"AdventureApp\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useMemo","useSpeech","useItinerary","useAISuggestions","useLocalStorage","samplePOIs","mockWeather","NavigationTabs","PlanningPanel","POIList","MapPanel","ItineraryPanel","SettingsPanel","AISuggestionsPanel","ErrorBoundary","LoadingSpinner","jsxDEV","_jsxDEV","REGIONS","DEFAULT_USER_PREFERENCES","interests","mobilityLevel","timePreference","AdventureApp","_s","selectedRegion","setSelectedRegion","startingPoint","setStartingPoint","currentView","setCurrentView","selectedDate","setSelectedDate","Date","toISOString","split","privacyMode","setPrivacyMode","offlineMode","setOfflineMode","voiceEnabled","setVoiceEnabled","userPreferences","setUserPreferences","weather","setWeather","isLoading","setIsLoading","error","setError","speak","availablePOIs","aiSuggestions","itinerary","addPOI","removePOI","optimizeItinerary","calculateTotalTime","calculateTotalCost","clearItinerary","handleRegionChange","region","handleOptimizeItinerary","err","console","downloadOfflineContent","Promise","resolve","setTimeout","handleUserPreferencesUpdate","updates","prev","loadWeatherData","timer","clearTimeout","viewNames","planning","settings","className","children","fileName","_jsxFileName","lineNumber","columnNumber","hasItineraryItems","length","regions","pois","addToItinerary","applyAISuggestion","suggestion","title","_c","$RefreshReg$"],"sources":["/workspaces/trail-quest-adventure-app/src/App.tsx"],"sourcesContent":["// App.tsx\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useSpeech } from './hooks/useSpeech';\nimport { useItinerary } from './hooks/useItinerary';\nimport { useAISuggestions } from './hooks/useAISuggestions';\nimport { useLocalStorage } from './hooks/useLocalStorage';\nimport { samplePOIs, mockWeather } from './data/sampleData';\nimport { Weather, UserPreferences, ViewType } from './types/types';\nimport NavigationTabs from './components/NavigationTabs';\nimport PlanningPanel from './components/planning/PlanningPanel';\nimport POIList from './components/planning/POIList';\nimport MapPanel from './components/map/MapPanel';\nimport ItineraryPanel from './components/itinerary/ItineraryPanel';\nimport SettingsPanel from './components/settings/SettingsPanel';\nimport AISuggestionsPanel from './components/ai/AISuggestionsPanel';\nimport ErrorBoundary from './components/common/ErrorBoundary';\nimport LoadingSpinner from './components/common/LoadingSpinner';\n\n// Constants\nconst REGIONS = [\n  'Blue Ridge Mountains, VA',\n  'Appalachian Trail, NH',\n  'Historic Boston, MA',\n  'Colonial Williamsburg, VA',\n  'Great Smoky Mountains, TN'\n] as const;\n\nconst DEFAULT_USER_PREFERENCES: UserPreferences = {\n  interests: [],\n  mobilityLevel: 'moderate',\n  timePreference: 'flexible'\n};\n\nconst AdventureApp: React.FC = () => {\n  // Core state with localStorage persistence\n  const [selectedRegion, setSelectedRegion] = useLocalStorage<string>('selectedRegion', '');\n  const [startingPoint, setStartingPoint] = useLocalStorage<string>('startingPoint', '');\n  const [currentView, setCurrentView] = useLocalStorage<ViewType>('currentView', 'planning');\n  const [selectedDate, setSelectedDate] = useState<string>(\n    new Date().toISOString().split('T')[0]\n  );\n\n  // Settings state with localStorage persistence\n  const [privacyMode, setPrivacyMode] = useLocalStorage<boolean>('privacyMode', false);\n  const [offlineMode, setOfflineMode] = useLocalStorage<boolean>('offlineMode', false);\n  const [voiceEnabled, setVoiceEnabled] = useLocalStorage<boolean>('voiceEnabled', false);\n  const [userPreferences, setUserPreferences] = useLocalStorage<UserPreferences>(\n    'userPreferences',\n    DEFAULT_USER_PREFERENCES\n  );\n\n  // Weather state (not persisted as it's time-sensitive)\n  const [weather, setWeather] = useState<Weather | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // Custom hooks\n  const speak = useSpeech(voiceEnabled);\n  \n  // Memoized available POIs to prevent unnecessary re-renders\n  const availablePOIs = useMemo(\n    () => (selectedRegion ? samplePOIs[selectedRegion] || [] : []),\n    [selectedRegion]\n  );\n\n  const aiSuggestions = useAISuggestions(selectedRegion, availablePOIs, userPreferences);\n  const { \n    itinerary, \n    addPOI, \n    removePOI, \n    optimizeItinerary, \n    calculateTotalTime, \n    calculateTotalCost,\n    clearItinerary\n  } = useItinerary();\n\n  // Memoized handlers to prevent child re-renders\n  const handleRegionChange = useCallback((region: string) => {\n    setSelectedRegion(region);\n    // Clear itinerary when region changes to avoid conflicts\n    if (region !== selectedRegion) {\n      clearItinerary();\n    }\n  }, [selectedRegion, setSelectedRegion, clearItinerary]);\n\n  const handleOptimizeItinerary = useCallback(() => {\n    try {\n      optimizeItinerary();\n      speak('Itinerary optimized for best visiting times and travel efficiency.');\n    } catch (err) {\n      setError('Failed to optimize itinerary. Please try again.');\n      console.error('Optimization error:', err);\n    }\n  }, [optimizeItinerary, speak]);\n\n  const downloadOfflineContent = useCallback(async () => {\n    try {\n      setIsLoading(true);\n      // Simulate download delay\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      setOfflineMode(true);\n      speak('Offline content downloaded. Maps and site information available without internet.');\n    } catch (err) {\n      setError('Failed to download offline content. Please check your connection.');\n      console.error('Offline download error:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [setOfflineMode, speak]);\n\n  const handleUserPreferencesUpdate = useCallback((updates: Partial<UserPreferences>) => {\n    setUserPreferences(prev => ({ ...prev, ...updates }));\n  }, [setUserPreferences]);\n\n  // Effects\n  useEffect(() => {\n    const loadWeatherData = async () => {\n      try {\n        setIsLoading(true);\n        // Simulate API call\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        setWeather(mockWeather);\n      } catch (err) {\n        setError('Failed to load weather data');\n        console.error('Weather loading error:', err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadWeatherData();\n  }, [selectedRegion]); // Reload weather when region changes\n\n  // Clear error after 5 seconds\n  useEffect(() => {\n    if (error) {\n      const timer = setTimeout(() => setError(null), 5000);\n      return () => clearTimeout(timer);\n    }\n  }, [error]);\n\n  // Accessibility: Announce view changes\n  useEffect(() => {\n    if (voiceEnabled) {\n      const viewNames = {\n        planning: 'Trip Planning',\n        itinerary: 'My Itinerary',\n        settings: 'Settings and AI Suggestions'\n      };\n      speak(`Switched to ${viewNames[currentView]} view`);\n    }\n  }, [currentView, voiceEnabled, speak]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  return (\n    <ErrorBoundary>\n      <div className=\"max-w-6xl mx-auto p-6 bg-gradient-to-br from-green-50 to-blue-50 min-h-screen\">\n        <header className=\"text-center mb-8\">\n          <h1 className=\"text-4xl font-bold text-green-800 mb-2\">\n            🏔️ TrailQuest\n          </h1>\n          <p className=\"text-gray-600\">\n            Plan your perfect outdoor historical adventure\n          </p>\n          \n          {/* Error notification */}\n          {error && (\n            <div className=\"mt-4 p-4 bg-red-100 border border-red-300 rounded-lg text-red-700\">\n              {error}\n            </div>\n          )}\n          \n          {/* Offline indicator */}\n          {offlineMode && (\n            <div className=\"mt-2 inline-flex items-center px-3 py-1 rounded-full text-sm bg-green-100 text-green-800\">\n              ✓ Offline Ready\n            </div>\n          )}\n        </header>\n\n        <NavigationTabs \n          currentView={currentView} \n          setCurrentView={setCurrentView}\n          hasItineraryItems={itinerary.length > 0}\n        />\n\n        {currentView === 'planning' && (\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <PlanningPanel\n              selectedRegion={selectedRegion}\n              setSelectedRegion={handleRegionChange}\n              selectedDate={selectedDate}\n              setSelectedDate={setSelectedDate}\n              startingPoint={startingPoint}\n              setStartingPoint={setStartingPoint}\n              weather={weather}\n              regions={REGIONS}\n              privacyMode={privacyMode}\n            >\n              <POIList \n                pois={availablePOIs} \n                addToItinerary={addPOI}\n                userPreferences={userPreferences}\n                speak={speak}\n              />\n            </PlanningPanel>\n            \n            <MapPanel \n              itinerary={itinerary}\n              availablePOIs={availablePOIs}\n              startingPoint={startingPoint}\n              offlineMode={offlineMode}\n            />\n          </div>\n        )}\n\n        {currentView === 'itinerary' && (\n          <ItineraryPanel\n            itinerary={itinerary}\n            removePOI={removePOI}\n            optimizeItinerary={handleOptimizeItinerary}\n            calculateTotalTime={calculateTotalTime}\n            calculateTotalCost={calculateTotalCost}\n            speak={speak}\n            selectedDate={selectedDate}\n            startingPoint={startingPoint}\n            clearItinerary={clearItinerary}\n          />\n        )}\n\n        {currentView === 'settings' && (\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <SettingsPanel\n              privacyMode={privacyMode}\n              setPrivacyMode={setPrivacyMode}\n              voiceEnabled={voiceEnabled}\n              setVoiceEnabled={setVoiceEnabled}\n              userPreferences={userPreferences}\n              setUserPreferences={handleUserPreferencesUpdate}\n              offlineMode={offlineMode}\n              downloadOfflineContent={downloadOfflineContent}\n              isLoading={isLoading}\n            />\n            \n            <AISuggestionsPanel\n              userPreferences={userPreferences}\n              setUserPreferences={handleUserPreferencesUpdate}\n              aiSuggestions={aiSuggestions}\n              selectedRegion={selectedRegion}\n              applyAISuggestion={(suggestion) => {\n                // Logic to apply AI suggestion to itinerary\n                speak(`Applied AI suggestion: ${suggestion.title}`);\n              }}\n            />\n          </div>\n        )}\n      </div>\n    </ErrorBoundary>\n  );\n};\n\nexport default AdventureApp;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}